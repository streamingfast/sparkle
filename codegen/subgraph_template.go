package codegen

var templateSubgraph = `
const (
	FactoryAddress = "{{ .FactoryAddress }}"
	ZeroAddress = "0x0000000000000000000000000000000000000000"
)

var (
	FactoryAddressBytes = eth.MustNewAddress(FactoryAddress).Bytes()
	ZeroAddressBytes = eth.MustNewAddress(ZeroAddress).Bytes()
)

// Aliases for numerical functions
var (
	S = entity.S
	B = entity.B
	F = entity.NewFloat
	FL = entity.NewFloatFromLiteral
	I = entity.NewInt
	IL = entity.NewIntFromLiteral
	bf = func() *big.Float { return new(big.Float) }
	bi = func() *big.Int { return new(big.Int) }
)

var Definition = &subgraph.Definition{
	PackageName: "{{ .PackageName }}",
	HighestParallelStep: {{ .HighestParallelStep }},
	StartBlock:    {{ .StartBlock }},
	IncludeFilter: "",
	Entities: entity.NewRegistry(
{{- range $entity := .Entities }}
		&{{ $entity.Name }}{},
{{- end }}
{{- if .HasDynamicTemplate }}
		&DynamicDataSourceXXX{},
{{- end }}
	),
	DDL: ddl,
	Manifest: {{ $engine.BackTick }}{{ $engine.Manifest }}{{ $engine.BackTick }},
	GraphQLSchema: {{ $engine.BackTick }}{{ $engine.GraphQLSchema }}{{ $engine.BackTick }},
	Abis: map[string]string{
{{- range $name, $abi := .Abis }}
		"{{ $name }}": {{ $engine.BackTick }}{{ $abi }}{{ $engine.BackTick }},
{{- end }}
	},
	New: func(base subgraph.Base) subgraph.Subgraph {
		return &Subgraph{
			Base: base,
			DynamicDataSources: map[string]*DynamicDataSourceXXX{},
		}
	},
	MergeFunc: func(step int, cached, new entity.Interface) entity.Interface {
		switch new.(type) {
{{- range $entity := .Entities }}
		case interface {
			Merge(step int, new *{{ $entity.Name }})
		}:
			var c *{{ $entity.Name }}
			if cached == nil {
				return new.(*{{ $entity.Name }})
			}
			c = cached.(*{{ $entity.Name }})
			el := new.(*{{ $entity.Name }})
			el.Merge(step, c)
			return el
{{- end }}
{{- if .HasDynamicTemplate }}
		case *DynamicDataSourceXXX:
			return new
{{- end }}
		}
		panic("unsupported merge type")
	},
}

type Subgraph struct {
	subgraph.Base

	CurrentBlockDynamicDataSources map[string]*DynamicDataSourceXXX
	DynamicDataSources map[string]*DynamicDataSourceXXX
}

`

var templateSubgraphExt = `package {{ .PackageName }}

func (s *Subgraph) Init() error {
	return nil // Code segment generated by sparkle. Edit if necessary.
}

func (s *Subgraph) LogStatus() {
	return // Code segment generated by sparkle. Edit if necessary.
}`
