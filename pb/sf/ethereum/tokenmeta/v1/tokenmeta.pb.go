// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: sf/ethereum/tokenmeta/v1/tokenmeta.proto

package pbtokenmeta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetTokenRequest) Reset() {
	*x = GetTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenRequest) ProtoMessage() {}

func (x *GetTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenRequest.ProtoReflect.Descriptor instead.
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescGZIP(), []int{0}
}

func (x *GetTokenRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type StreamTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *StreamTokenRequest) Reset() {
	*x = StreamTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTokenRequest) ProtoMessage() {}

func (x *StreamTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTokenRequest.ProtoReflect.Descriptor instead.
func (*StreamTokenRequest) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescGZIP(), []int{1}
}

func (x *StreamTokenRequest) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     []byte  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol      string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals    uint32  `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	TotalSupply *BigInt `protobuf:"bytes,5,opt,name=totalSupply,proto3" json:"totalSupply,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescGZIP(), []int{2}
}

func (x *Token) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Token) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Token) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Token) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Token) GetTotalSupply() *BigInt {
	if x != nil {
		return x.TotalSupply
	}
	return nil
}

type BigInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *BigInt) Reset() {
	*x = BigInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigInt) ProtoMessage() {}

func (x *BigInt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigInt.ProtoReflect.Descriptor instead.
func (*BigInt) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescGZIP(), []int{3}
}

func (x *BigInt) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

var File_sf_ethereum_tokenmeta_v1_tokenmeta_proto protoreflect.FileDescriptor

var file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDesc = []byte{
	0x0a, 0x28, 0x73, 0x66, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73, 0x66, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x32, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0xbf, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x5e, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73,
	0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x30, 0x01, 0x12,
	0x56, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x2e, 0x73, 0x66,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x53, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66,
	0x61, 0x73, 0x74, 0x2f, 0x73, 0x66, 0x2d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2d,
	0x70, 0x72, 0x69, 0x76, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31,
	0x3b, 0x70, 0x62, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescOnce sync.Once
	file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescData = file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDesc
)

func file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescGZIP() []byte {
	file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescOnce.Do(func() {
		file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescData)
	})
	return file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDescData
}

var file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_goTypes = []interface{}{
	(*GetTokenRequest)(nil),    // 0: sf.ethereum.tokenmeta.v1.GetTokenRequest
	(*StreamTokenRequest)(nil), // 1: sf.ethereum.tokenmeta.v1.StreamTokenRequest
	(*Token)(nil),              // 2: sf.ethereum.tokenmeta.v1.Token
	(*BigInt)(nil),             // 3: sf.ethereum.tokenmeta.v1.BigInt
}
var file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_depIdxs = []int32{
	3, // 0: sf.ethereum.tokenmeta.v1.Token.totalSupply:type_name -> sf.ethereum.tokenmeta.v1.BigInt
	1, // 1: sf.ethereum.tokenmeta.v1.State.StreamToken:input_type -> sf.ethereum.tokenmeta.v1.StreamTokenRequest
	0, // 2: sf.ethereum.tokenmeta.v1.State.GetToken:input_type -> sf.ethereum.tokenmeta.v1.GetTokenRequest
	2, // 3: sf.ethereum.tokenmeta.v1.State.StreamToken:output_type -> sf.ethereum.tokenmeta.v1.Token
	2, // 4: sf.ethereum.tokenmeta.v1.State.GetToken:output_type -> sf.ethereum.tokenmeta.v1.Token
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_init() }
func file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_init() {
	if File_sf_ethereum_tokenmeta_v1_tokenmeta_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_goTypes,
		DependencyIndexes: file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_depIdxs,
		MessageInfos:      file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_msgTypes,
	}.Build()
	File_sf_ethereum_tokenmeta_v1_tokenmeta_proto = out.File
	file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_rawDesc = nil
	file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_goTypes = nil
	file_sf_ethereum_tokenmeta_v1_tokenmeta_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateClient interface {
	StreamToken(ctx context.Context, in *StreamTokenRequest, opts ...grpc.CallOption) (State_StreamTokenClient, error)
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*Token, error)
}

type stateClient struct {
	cc grpc.ClientConnInterface
}

func NewStateClient(cc grpc.ClientConnInterface) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) StreamToken(ctx context.Context, in *StreamTokenRequest, opts ...grpc.CallOption) (State_StreamTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_State_serviceDesc.Streams[0], "/sf.ethereum.tokenmeta.v1.State/StreamToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateStreamTokenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type State_StreamTokenClient interface {
	Recv() (*Token, error)
	grpc.ClientStream
}

type stateStreamTokenClient struct {
	grpc.ClientStream
}

func (x *stateStreamTokenClient) Recv() (*Token, error) {
	m := new(Token)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/sf.ethereum.tokenmeta.v1.State/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServer is the server API for State service.
type StateServer interface {
	StreamToken(*StreamTokenRequest, State_StreamTokenServer) error
	GetToken(context.Context, *GetTokenRequest) (*Token, error)
}

// UnimplementedStateServer can be embedded to have forward compatible implementations.
type UnimplementedStateServer struct {
}

func (*UnimplementedStateServer) StreamToken(*StreamTokenRequest, State_StreamTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamToken not implemented")
}
func (*UnimplementedStateServer) GetToken(context.Context, *GetTokenRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}

func RegisterStateServer(s *grpc.Server, srv StateServer) {
	s.RegisterService(&_State_serviceDesc, srv)
}

func _State_StreamToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTokenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServer).StreamToken(m, &stateStreamTokenServer{stream})
}

type State_StreamTokenServer interface {
	Send(*Token) error
	grpc.ServerStream
}

type stateStreamTokenServer struct {
	grpc.ServerStream
}

func (x *stateStreamTokenServer) Send(m *Token) error {
	return x.ServerStream.SendMsg(m)
}

func _State_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.ethereum.tokenmeta.v1.State/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _State_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sf.ethereum.tokenmeta.v1.State",
	HandlerType: (*StateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _State_GetToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamToken",
			Handler:       _State_StreamToken_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sf/ethereum/tokenmeta/v1/tokenmeta.proto",
}
